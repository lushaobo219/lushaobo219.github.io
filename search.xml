<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django2.0.4 配置全文检索</title>
    <url>/2020/09/17/Django2-0-4-%E9%85%8D%E7%BD%AE%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/</url>
    <content><![CDATA[<h3 id="Django全文检索"><a href="#Django全文检索" class="headerlink" title="Django全文检索"></a>Django全文检索</h3><p>1:haystack是django的开源搜索框架，该框架支持Solr，Elasticsearch，Whoosh，<em>Xapian</em>搜索引擎，不用更改代码，直接切换引擎，减少代码量。</p>
<p>2：搜索引擎使用Whoosh，这是一个由纯Python实现的全文搜索引擎，没有二进制文件等，比较小巧，配置比较简单，当然性能自然略低。</p>
<p>3：中文分词Jieba，由于Whoosh自带的是英文分词，对中文的分词支持不是太好，故用jieba替换whoosh的分词组件。</p>
<h4 id="1-Django中实现全文索引的组件"><a href="#1-Django中实现全文索引的组件" class="headerlink" title="1.Django中实现全文索引的组件"></a>1.Django中实现全文索引的组件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-haystack~=<span class="number">2.8</span><span class="number">.0</span></span><br><span class="line">pip install Whoosh==<span class="number">2.7</span><span class="number">.4</span></span><br><span class="line">pip install  jieba (自己配置)</span><br></pre></td></tr></table></figure>

<h4 id="2-在配置文件settings-py中添加应用"><a href="#2-在配置文件settings-py中添加应用" class="headerlink" title="2.在配置文件settings.py中添加应用"></a>2.在配置文件settings.py中添加应用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'haystack'</span>,  <span class="comment">#haystack要放在自建应用的上面</span></span><br><span class="line">    <span class="string">'extra_apps.xadmin'</span>,</span><br><span class="line">    <span class="string">'crispy_forms'</span>,</span><br><span class="line">    <span class="string">'apps.course'</span>,  <span class="comment"># 课程模块</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)],</span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="3-在配置文件settings-py中配置全文搜索框架"><a href="#3-在配置文件settings-py中配置全文搜索框架" class="headerlink" title="3.在配置文件settings.py中配置全文搜索框架"></a>3.在配置文件settings.py中配置全文搜索框架</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置全文检索</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置全文检索引擎</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="comment"># 配置搜索引擎</span></span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'haystack.backends.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="comment"># 配置索引文件目录</span></span><br><span class="line">        <span class="string">'PATH'</span>:os.path.join(BASE_DIR,<span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 全文检索结果每次返回数量</span></span><br><span class="line">HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="number">20</span></span><br><span class="line"><span class="comment">#添加此项，当数据库改变时，会自动更新索引，非常方便</span></span><br><span class="line">HAYSTACK_SIGNAL_PROCESSOR = <span class="string">'haystack.signals.RealtimeSignalProcessor'</span></span><br></pre></td></tr></table></figure>

<h4 id="4-在课程应用下创建search-indexes-py名字不能动"><a href="#4-在课程应用下创建search-indexes-py名字不能动" class="headerlink" title="4.在课程应用下创建search_indexes.py名字不能动"></a>4.在课程应用下创建search_indexes.py名字不能动</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> haystack <span class="keyword">import</span> indexes</span><br><span class="line"><span class="keyword">from</span> apps.course.models <span class="keyword">import</span> Course</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseIndex</span><span class="params">(indexes.SearchIndex, indexes.Indexable)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Course索引类</span></span><br><span class="line"><span class="string">    text 为索引字段</span></span><br><span class="line"><span class="string">    document=True ，代表haystack和搜索引擎将使用此字段的内容作为索引进行检索</span></span><br><span class="line"><span class="string">    use_template=True ，指根据表中的字段建立索引文件的说明放在一个文件中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    text = indexes.CharField(document=<span class="literal">True</span>, use_template=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_model</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""建立返回索引模型类"""</span></span><br><span class="line">        <span class="keyword">return</span> Course</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_queryset</span><span class="params">(self, using=None)</span>:</span></span><br><span class="line">        <span class="string">"""返回要建立索引的数据查询集"""</span></span><br><span class="line">        <span class="keyword">return</span> self.get_model().objects.all()</span><br></pre></td></tr></table></figure>

<h4 id="5-指定索引模板文件"><a href="#5-指定索引模板文件" class="headerlink" title="5.指定索引模板文件"></a>5.指定索引模板文件</h4><h5 id="创建文件路径命名必须这个规范：templates-search-indexes-应用名称-模型类名称-text-txt"><a href="#创建文件路径命名必须这个规范：templates-search-indexes-应用名称-模型类名称-text-txt" class="headerlink" title="创建文件路径命名必须这个规范：templates / search / indexes /应用名称/模型类名称_text.txt"></a>创建文件路径命名必须这个规范：templates / search / indexes /应用名称/模型类名称_text.txt</h5><h5 id="例：template-search-indexes-courses-course-text-txt-课程对应的是app-名称course-text-txt-课程的对应的是模型名称"><a href="#例：template-search-indexes-courses-course-text-txt-课程对应的是app-名称course-text-txt-课程的对应的是模型名称" class="headerlink" title="例：template / search / indexes / courses / course_text.txt  课程对应的是app     名称course_text.txt     课程的对应的是模型名称"></a>例：template / search / indexes / courses / course_text.txt  课程对应的是app     名称course_text.txt     课程的对应的是模型名称</h5><p><img src="../imags/Django2-0-4-%E9%85%8D%E7%BD%AE%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/temp.png" alt=""></p>
<h5 id="在course-text-txt中定义需要检索的字段"><a href="#在course-text-txt中定义需要检索的字段" class="headerlink" title="在course_text.txt中定义需要检索的字段"></a>在course_text.txt中定义需要检索的字段</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义要创建索引的字段</span></span><br><span class="line">&#123;&#123; object.name &#125;&#125;</span><br><span class="line">&#123;&#123; object.desc &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-然后执行命令创建需要的全文索引"><a href="#6-然后执行命令创建需要的全文索引" class="headerlink" title="6.然后执行命令创建需要的全文索引"></a>6.然后执行命令创建需要的全文索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure>

<h4 id="7-搜索函数，仅供参考，在课程app中view中创建搜索函数"><a href="#7-搜索函数，仅供参考，在课程app中view中创建搜索函数" class="headerlink" title="7.搜索函数，仅供参考，在课程app中view中创建搜索函数"></a>7.搜索函数，仅供参考，在课程app中view中创建搜索函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> InvalidPage, Paginator</span><br><span class="line"><span class="keyword">from</span> haystack.forms <span class="keyword">import</span> ModelSearchForm</span><br><span class="line"><span class="keyword">from</span> haystack.query <span class="keyword">import</span> EmptySearchQuerySet</span><br><span class="line"><span class="keyword">from</span> syl_django.settings <span class="keyword">import</span> HAYSTACK_SEARCH_RESULTS_PER_PAGE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">course_index_search</span><span class="params">(request,load_all=True,form_class=ModelSearchForm,searchqueryset=None,results_per_page=None,extra_context=None)</span></span></span><br><span class="line">    query = ''</span><br><span class="line">    results = EmptySearchQuerySet()</span><br><span class="line">    <span class="comment"># 获取前端传的参数</span></span><br><span class="line">    <span class="keyword">if</span> request.GET.get(<span class="string">'q'</span>):</span><br><span class="line">      form=form_class(request.GET,searchqueryset=searchqueryset,load_all=load_all)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            query = form.cleaned_data[<span class="string">'q'</span>]</span><br><span class="line">            results = form.search()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            form = form_class(searchqueryset=searchqueryset,load_all=load_all)</span><br><span class="line"></span><br><span class="line">        paginator = Paginator(results,results_per_page <span class="keyword">or</span> 													HAYSTACK_SEARCH_RESULTS_PER_PAGE)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            page = paginator.page(int(request.GET.get(<span class="string">'page'</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> InvalidPage:</span><br><span class="line">            result = (&#123;<span class="string">'code'</span>:<span class="number">404</span>,<span class="string">'msg'</span>:<span class="string">'NO file found'</span>,<span class="string">'data'</span>:<span class="string">''</span>&#125;)</span><br><span class="line">            <span class="keyword">return</span> RecoCourse(result)</span><br><span class="line"></span><br><span class="line">        context = &#123;</span><br><span class="line">            <span class="string">'form'</span>:form,</span><br><span class="line">            <span class="string">'page'</span>:page,</span><br><span class="line">            <span class="string">'paginator'</span>:paginator,</span><br><span class="line">            <span class="string">'query'</span>:query,</span><br><span class="line">            <span class="string">'suggestion'</span>:<span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> results.query.backend.include_spelling:</span><br><span class="line">            context[<span class="string">'suggestion'</span>] = form.get_suggestion()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_context:</span><br><span class="line">            context.update(extra_context)</span><br><span class="line">		<span class="comment"># 要返回的结果</span></span><br><span class="line">        jsondata=[]</span><br><span class="line">        <span class="keyword">for</span>  result <span class="keyword">in</span> page.object_list:</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">'pk'</span>:result.object.id,</span><br><span class="line">            &#125;</span><br><span class="line">            jsondata.append(data)</span><br><span class="line">        <span class="keyword">if</span> jsondata:</span><br><span class="line">            result = &#123;</span><br><span class="line">                <span class="string">'data'</span>:jsondata</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = &#123;<span class="string">'data'</span>:<span class="string">''</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result,content_type = <span class="string">'application/json'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="8-替换jieba分词"><a href="#8-替换jieba分词" class="headerlink" title="8.替换jieba分词"></a>8.替换jieba分词</h4><p>​    1）将haystack源代码复制到项目中并改名</p>
<p><img src="../imags/Django2-0-4-%E9%85%8D%E7%BD%AE%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/Snipaste_2020-09-17_09-06-23.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="string">'''复制源码中文件并改名'''</span></span><br><span class="line">将 C:\python37\lib\site-packages\haystack\backends\whoosh_backend.py文件复制到项目中并将  whoosh_backend.py 改名为 whoosh_cn_backend.py 放在APP中如：sourse\whoosh_cn_backend.py</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span><span class="string">'''修改源码中文件'''</span></span><br><span class="line"><span class="comment"># 在全局引入的最后一行加入jieba分词器</span></span><br><span class="line"><span class="keyword">from</span> jieba.analyse <span class="keyword">import</span> ChineseAnalyzer</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="string">'''修改为中文分词'''</span></span><br><span class="line"><span class="comment"># 查找</span></span><br><span class="line">analyzer=StemmingAnalyzer()</span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">analyzer=ChineseAnalyzer()</span><br></pre></td></tr></table></figure>

<p>​    2) Django内settings内修改相应的haystack后台文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置全文检索引擎</span></span><br><span class="line">HAYSTACK_CONNECTIONS = &#123;</span><br><span class="line">    <span class="string">'default'</span>:&#123;</span><br><span class="line">        <span class="comment"># 配置搜索引擎</span></span><br><span class="line">        <span class="comment"># 'ENGINE':'haystack.backends.whoosh_cn_backend.WhooshEngine',</span></span><br><span class="line">        <span class="comment"># 中文分词 使用jieba的whoosh引擎，刚才复制源码到app中的位置</span></span><br><span class="line">        <span class="string">'ENGINE'</span>:<span class="string">'apps.course.whoosh_cn_backend.WhooshEngine'</span>,</span><br><span class="line">        <span class="string">'PATH'</span>:os.path.join(BASE_DIR,<span class="string">'whoosh_index'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    3）重新生成索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py rebuild_index</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Djanog python</tag>
      </tags>
  </entry>
  <entry>
    <title>Django自定义随机验证码</title>
    <url>/2020/09/15/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9A%8F%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<h3 id="django自定义随机数字验证码"><a href="#django自定义随机数字验证码" class="headerlink" title="django自定义随机数字验证码"></a>django自定义随机数字验证码</h3><h4 id="1-在view中定义视图函数"><a href="#1-在view中定义视图函数" class="headerlink" title="1,在view中定义视图函数"></a>1,在view中定义视图函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"><span class="comment"># 导入图片库</span></span><br><span class="line"><span class="comment"># 绘画库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="comment"># 字体库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="comment"># 图片库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 文件流</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入redis数据库</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义连接对象和端口</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义连接对象</span></span><br><span class="line">r = redis.Redis(host=host, port=port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义验证码类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCode</span><span class="params">(View)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义随机颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_color</span><span class="params">(self)</span>:</span></span><br><span class="line">        R = random.randrange(<span class="number">255</span>)</span><br><span class="line">        G = random.randrange(<span class="number">255</span>)</span><br><span class="line">        B = random.randrange(<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (R, G, B)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取验证码试图</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 画布</span></span><br><span class="line">        img_size = (<span class="number">120</span>, <span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 定义画图对象</span></span><br><span class="line">        image = Image.new(<span class="string">'RGB'</span>, img_size, <span class="string">'white'</span>)</span><br><span class="line">        <span class="comment"># 定义画笔对象</span></span><br><span class="line">        draw = ImageDraw.Draw(image, <span class="string">'RGB'</span>)</span><br><span class="line">        <span class="comment"># 定义随机字符串</span></span><br><span class="line">        source = <span class="string">'123456789'</span></span><br><span class="line">        <span class="comment"># 容器</span></span><br><span class="line">        code_str = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 定义字体</span></span><br><span class="line">        my_font = ImageFont.truetype(font=<span class="string">"C:\\Windows\\Fonts\\Arial.ttf"</span>,size=<span class="number">15</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="comment"># 获取随机颜色</span></span><br><span class="line">            text_color = self.get_random_color()</span><br><span class="line">            <span class="comment"># 获取随机字符串长度下标</span></span><br><span class="line">            tmp_num = random.randrange(len(source))</span><br><span class="line">            <span class="comment"># 获取字符集</span></span><br><span class="line">            random_str = source[tmp_num]</span><br><span class="line">            <span class="comment"># 添加到容器中</span></span><br><span class="line">            code_str += random_str</span><br><span class="line">            <span class="comment"># 将字符串添加到画布中</span></span><br><span class="line">            draw.text((<span class="number">10</span> + <span class="number">30</span> * i, <span class="number">20</span>), random_str, text_color, font=my_font)</span><br><span class="line">        <span class="comment"># 建立缓存区</span></span><br><span class="line">        buf = io.BytesIO()</span><br><span class="line">        <span class="comment"># 将验证码存储到redis</span></span><br><span class="line">        r.set(<span class="string">'code'</span>, code_str)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存图片</span></span><br><span class="line">        image.save(buf, <span class="string">'png'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将验证码存到session中</span></span><br><span class="line">        <span class="comment"># request.session['code'] = code_str</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(buf.getvalue(), <span class="string">'image/png'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2，在自定义app中urls中添加路由"><a href="#2，在自定义app中urls中添加路由" class="headerlink" title="2，在自定义app中urls中添加路由"></a>2，在自定义app中urls中添加路由</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> MyCode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'myapp'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'mycode/'</span>,MyCode.as_view()), </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-运行项目"><a href="#3-运行项目" class="headerlink" title="3,运行项目"></a>3,运行项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<p><img src="../imags/Django%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9A%8F%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81/code.png" alt=""></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows平台，运行celery报错</title>
    <url>/2020/09/15/%E5%9C%A8windows%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%BF%90%E8%A1%8Ccelery%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="windows平台上，在django项目中，使用celery做异步任务时报错"><a href="#windows平台上，在django项目中，使用celery做异步任务时报错" class="headerlink" title="windows平台上，在django项目中，使用celery做异步任务时报错!"></a>windows平台上，在django项目中，使用celery做异步任务时报错!</h3><p><img src="/imags/%E5%9C%A8windows%E5%B9%B3%E5%8F%B0%EF%BC%8C%E8%BF%90%E8%A1%8Ccelery%E6%8A%A5%E9%94%99/celery.png" alt=""></p>
<h3 id="个人解决方法，不一定全部适用，在启动celery命令加上-–pool-solo"><a href="#个人解决方法，不一定全部适用，在启动celery命令加上-–pool-solo" class="headerlink" title="个人解决方法，不一定全部适用，在启动celery命令加上 –pool=solo"></a>个人解决方法，不一定全部适用，在启动celery命令加上 –pool=solo</h3><p><code>celery -A celery_tasks worker --poll=solo -l info</code></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2019/12/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
